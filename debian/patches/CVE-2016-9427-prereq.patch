From: Ivan Maidanski <ivmai@mail.ru>
Date: Thu, 24 Nov 2016 16:06:04 +0100
Subject: Fix GET_MEM argument rounding in GC_scratch_alloc and similar

(Prevent abort in GC_unix_mmap_get_mem if the allocation size is not
a multiple of a page size.)
(Apply commit 62bfeb0 from 'release-7_4' branch.)

* backgraph.c (new_back_edges, push_in_progress): Use
ROUNDUP_PAGESIZE_IF_MMAP() to adjust GET_MEM() argument (when needed).
* headers.c (GC_scratch_alloc): Likewise.
* misc.c (GC_envfile_init): Likewise.
* include/private/gc_priv.h (ROUNDUP_PAGESIZE_IF_MMAP): New macro.
* include/private/gcconfig.h (MMAP_SUPPORTED): Move definition from
os_dep.c (as needed for ROUNDUP_PAGESIZE_IF_MMAP() definition).
* include/private/gcconfig.h (GET_MEM): Refine comment (regarding its
argument).

[hertzog@debian.org: This commit is a pre-requisite to apply the patches
that actually fix CVE-2016-9427.]

Origin: backport, https://github.com/ivmai/bdwgc/commit/175b8d2c17a37fddbd76302baf42d73688b8bccb
Bug: https://github.com/ivmai/bdwgc/issues/135
Bug-Debian: https://bugs.debian.org/844771
---
 backgraph.c                |  8 ++++++--
 headers.c                  | 14 ++++----------
 include/private/gc_priv.h  | 12 ++++++++++++
 include/private/gcconfig.h |  9 +++++++--
 os_dep.c                   |  5 -----
 5 files changed, 29 insertions(+), 19 deletions(-)

diff --git a/backgraph.c b/backgraph.c
index 92d09e0..d7915ff 100644
--- a/backgraph.c
+++ b/backgraph.c
@@ -84,8 +84,9 @@ static back_edges *avail_back_edges = 0;
 static back_edges * new_back_edges(void)
 {
   if (0 == back_edge_space) {
-    back_edge_space = (back_edges *)
-	    		GET_MEM(MAX_BACK_EDGE_STRUCTS*sizeof(back_edges));
+    back_edge_space = (back_edges *)GET_MEM(
+			ROUNDUP_PAGESIZE_IF_MMAP(MAX_BACK_EDGE_STRUCTS
+						 * sizeof(back_edges)));
     GC_add_to_our_memory((ptr_t)back_edge_space,
     			 MAX_BACK_EDGE_STRUCTS*sizeof(back_edges));
   }
@@ -126,6 +127,9 @@ static void push_in_progress(ptr_t p)
   if (n_in_progress >= in_progress_size) 
     if (in_progress_size == 0) {
       in_progress_size = INITIAL_IN_PROGRESS;
+      in_progress_size = ROUNDUP_PAGESIZE_IF_MMAP(INITIAL_IN_PROGRESS
+						    * sizeof(ptr_t))
+			    / sizeof(ptr_t);
       in_progress_space = (ptr_t *)GET_MEM(in_progress_size * sizeof(ptr_t));
       GC_add_to_our_memory((ptr_t)in_progress_space,
       			   in_progress_size * sizeof(ptr_t));
diff --git a/headers.c b/headers.c
index 7aef710..de80b21 100644
--- a/headers.c
+++ b/headers.c
@@ -126,28 +126,22 @@ ptr_t GC_scratch_alloc(size_t bytes)
          
         if (bytes_to_get <= bytes) {
           /* Undo the damage, and get memory directly */
-	    bytes_to_get = bytes;
-#	    ifdef USE_MMAP
-		bytes_to_get += GC_page_size - 1;
-		bytes_to_get &= ~(GC_page_size - 1);
-#	    endif
+	    bytes_to_get = ROUNDUP_PAGESIZE_IF_MMAP(bytes);
    	    result = (ptr_t)GET_MEM(bytes_to_get);
 	    GC_add_to_our_memory(result, bytes_to_get);
             scratch_free_ptr -= bytes;
 	    GC_scratch_last_end_ptr = result + bytes;
             return(result);
         }
+
+	bytes_to_get = ROUNDUP_PAGESIZE_IF_MMAP(bytes_to_get); /* for safety */
         result = (ptr_t)GET_MEM(bytes_to_get);
         GC_add_to_our_memory(result, bytes_to_get);
         if (result == 0) {
 	    if (GC_print_stats)
                 GC_printf("Out of memory - trying to allocate less\n");
             scratch_free_ptr -= bytes;
-	    bytes_to_get = bytes;
-#	    ifdef USE_MMAP
-		bytes_to_get += GC_page_size - 1;
-		bytes_to_get &= ~(GC_page_size - 1);
-#	    endif
+	    bytes_to_get = ROUNDUP_PAGESIZE_IF_MMAP(bytes);
             result = (ptr_t)GET_MEM(bytes_to_get);
             GC_add_to_our_memory(result, bytes_to_get);
 	    return result;
diff --git a/include/private/gc_priv.h b/include/private/gc_priv.h
index 1d96d87..4a6edee 100644
--- a/include/private/gc_priv.h
+++ b/include/private/gc_priv.h
@@ -1184,6 +1184,18 @@ extern word GC_n_heap_sects;	/* Number of separately added heap	*/
 
 extern word GC_page_size;
 
+/* Round up allocation size to a multiple of a page size.       */
+/* GC_setpagesize() is assumed to be already invoked.           */
+#define ROUNDUP_PAGESIZE(bytes) \
+                (((bytes) + GC_page_size - 1) & ~(GC_page_size - 1))
+
+/* Same as above but used to make GET_MEM() argument safe.      */
+#ifdef MMAP_SUPPORTED
+# define ROUNDUP_PAGESIZE_IF_MMAP(bytes) ROUNDUP_PAGESIZE(bytes)
+#else
+# define ROUNDUP_PAGESIZE_IF_MMAP(bytes) (bytes)
+#endif
+
 # if defined(MSWIN32) || defined(MSWINCE)
   struct _SYSTEM_INFO;
   extern struct _SYSTEM_INFO GC_sysinfo;
diff --git a/include/private/gcconfig.h b/include/private/gcconfig.h
index d76929a..e226c5f 100644
--- a/include/private/gcconfig.h
+++ b/include/private/gcconfig.h
@@ -2129,6 +2129,11 @@
 #   undef MPROTECT_VDB
 # endif
 
+#if defined(LINUX) || defined(FREEBSD) || defined(SOLARIS) || defined(IRIX5) \
+	|| defined(USE_MMAP) || defined(USE_MUNMAP)
+# define MMAP_SUPPORTED
+#endif
+
 # ifdef USE_MUNMAP
 #   undef MPROTECT_VDB  /* Can't deal with address space holes. */
 # endif
@@ -2330,8 +2335,8 @@
 	/* -DREDIRECT_MALLOC.						*/
 	/* GET_MEM() returns a HLKSIZE aligned chunk.			*/
 	/* 0 is taken to mean failure. 					*/
-	/* In the case os USE_MMAP, the argument must also be a 	*/
-	/* physical page size.						*/
+	/* In case of MMAP_SUPPORTED, the argument must also be a 	*/
+	/* multiple of a physical page size.				*/
 	/* GET_MEM is currently not assumed to retrieve 0 filled space, */
 	/* though we should perhaps take advantage of the case in which */
 	/* does.							*/
diff --git a/os_dep.c b/os_dep.c
index f403375..b95cc21 100644
--- a/os_dep.c
+++ b/os_dep.c
@@ -97,11 +97,6 @@
 # include <malloc.h>   /* for locking */
 #endif
 
-#if defined(LINUX) || defined(FREEBSD) || defined(SOLARIS) || defined(IRIX5) \
-	|| defined(USE_MMAP) || defined(USE_MUNMAP)
-# define MMAP_SUPPORTED
-#endif
-
 #if defined(MMAP_SUPPORTED) || defined(ADD_HEAP_GUARD_PAGES)
 # if defined(USE_MUNMAP) && !defined(USE_MMAP)
     --> USE_MUNMAP requires USE_MMAP
